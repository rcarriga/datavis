{"version":3,"sources":["components/welcome.tsx","components/title.tsx","utils.ts","graphs/Minard.tsx","graphs/Nightingale.tsx","graphs/Planning/base.tsx","graphs/Planning/map.tsx","graphs/Planning/words.tsx","graphs/Planning/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","className","Title","props","background","text","name","subtext","useData","source","type","defaultVal","useState","data","setData","useEffect","fetch","then","response","csvData","Papa","parse","header","skipEmptyLines","complete","results","json","Minard","cities","dates","soldiers","style","height","width","Graph","maxSoldiers","Math","max","map","row","Number","SURV","strokeWidth","temps","TEMP","min","scale","chroma","mode","days","reduce","sum","DAYS","GradientLegend","x","y","fontSize","fill","id","x1","x2","y1","y2","index","key","offset","round","slice","stopColor","abs","prev","lines","domain","LONP","stroke","DIR","strokeLinecap","LATP","undefined","LONC","LATC","label","CITY","size","labels","orientation","gutter","colorScale","dataComponent","axis","display","tickLabels","VictoryChart","require","VictoryPolarAxis","Nightingale","range","setRange","rotation","setRotation","deathTypes","Object","keys","filter","includes","values","Month","date","tickValues","startAngle","endAngle","theme","VictoryTheme","material","polar","labelPlacement","deathType","barData","rate","num","digits","rounder","pow","floor","Size","labelComponent","animate","Controls","maxWidth","Slider","value","length","onChange","_","newVal","monthNames","decisions","decisionColours","Unconditional","Conditional","Refused","Highcharts","window","proj4","clusters","boost","DecisionMap","ref","useRef","year","setYear","month","setMonth","years","points","months","play","update","setTimeout","current","indexOf","nextMonth","nMonth","nYear","marginTop","onClick","cursor","IconButton","lineHeight","Map","monthData","series","decision","createSeries","point","options","createOptions","highcharts","constructorType","chart","ireland","animation","credits","enabled","title","tooltip","borderColor","nullColor","showInLegend","colour","color","turboThreshold","dataLabels","marker","symbol","states","hover","lineWidth","radiusPlus","fillColor","stops","rad","replace","radialGradient","r","cx","cy","cluster","allowOverlap","zones","zip","from","to","radius","log","HighchartsMore","Words","useOptions","isBubble","setEmpty","wordTotals","mapValues","words","counts","val","formatted","formatWordCounts","events","click","xAxis","categories","subtitle","useHTML","pointFormat","plotOptions","stacking","packedbubble","minSize","maxSize","layoutAlgorithm","gravitationalConstant","splitSeries","parentNodeLimit","format","textOutline","fontWeight","stack","lineColor","custom","count","toLowerCase","p","wordCounts","wordMaps","wordMap","axisOrder","union","sort","__","word","Planning","App","basename","role","marginLeft","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6f2a9dd.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Home = () => (\n  <div className={`hero has-background-dark is-bold is-large`}>\n    <div className=\"hero-body\">\n      <div className=\"container\">\n        <h1 className={`title has-text-light`}>Assignments for Data Visualisation</h1>\n        <h2 className={`subtitle has-text-light`}>Click on a name in the navbar to view the corresponding graph.</h2>\n      </div>\n    </div>\n  </div>\n)\n\nexport default Home\n","import React from \"react\"\n\nconst Title = (props: { name: string; subtext: string; background: string; text: string }) => (\n  <div className={`hero has-background-${props.background}`}>\n    <div className=\"hero-body\">\n      <div className=\"container\">\n        <h1 className={`title has-text-${props.text}`}>{props.name}</h1>\n        <h2 className={`subtitle has-text-${props.text}`}>{props.subtext}</h2>\n      </div>\n    </div>\n  </div>\n)\n\nexport default Title\n","import Papa from \"papaparse\"\nimport { useState, useEffect } from \"react\"\n\nexport const useData = <A = any>(source: string, type: \"CSV\" | \"JSON\" = \"CSV\", defaultVal?: A): A => {\n  const [data, setData] = useState(defaultVal || ([] as any))\n  useEffect(() => {\n    fetch(`data/${source}`).then((response) => {\n      if (type === \"CSV\")\n        response.text().then((csvData) => {\n          Papa.parse(csvData, {\n            header: true,\n            skipEmptyLines: true,\n            complete: function (results) {\n              setData(results.data)\n            },\n          })\n        })\n      else response.json().then(setData)\n    })\n  }, [source, type])\n  return data\n}\n\nexport const round = (num: number, digits = 1): number => {\n  const rounder = Math.pow(10, digits)\n  return Math.floor(num * rounder) / rounder\n}\n","import chroma from \"chroma-js\"\nimport Title from \"components/title\"\nimport React from \"react\"\nimport { useData } from \"utils\"\nimport { VictoryChart, VictoryScatter, VictoryLegend, VictoryLine, VictoryArea, VictoryAxis } from \"victory\"\n\nconst Minard = () => {\n  const cities: CityRow[] = useData(\"minard_cities.csv\")\n  const dates: DateRow[] = useData(\"minard_dates.csv\")\n  const soldiers: SoldierRow[] = useData(\"minard_soldiers.csv\")\n  return (\n    <div className=\"has-background-white container\" style={{ height: \"100%\", width: \"100%\" }}>\n      <Title name=\"Minard's Map\" subtext=\"Submission for Assignment 1.2 Part B\" background=\"success\" text=\"light\" />\n      <div style={{ height: \"100%\", width: \"100%\" }}>\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"columns\">\n              <div className=\"column\">\n                <Graph {...{ cities, soldiers, dates }} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Minard\n\ntype CityRow = { LONC: string; LATC: string; CITY: string }\ntype DateRow = { LONT: string; TEMP: string; DAYS: string; MON: string; DAY: string }\ntype SoldierRow = { LONP: string; LATP: string; SURV: string; DIR: string; DIV: string }\ntype GraphProps = { cities: CityRow[]; dates: DateRow[]; soldiers: SoldierRow[] }\n\nconst Graph = ({ dates, cities, soldiers }: GraphProps) => {\n  const maxSoldiers = Math.max(...soldiers.map(row => Number(row.SURV)))\n  const strokeWidth = (soldiers: string) => (30 * Number(soldiers)) / maxSoldiers\n  const temps = dates.map(row => Number(row.TEMP))\n  const min = Math.min(...temps)\n  const scale = chroma.scale([\"hsl(200, 100%, 80%)\", \"hsl(217, 71%, 43%)\"]).mode(\"lab\")\n  const days = dates.reduce((sum, row) => Number(row.DAYS) + sum, 0)\n  const GradientLegend = (props: any) => {\n    return (\n      <g>\n        <text x={props.x - 3} y={props.y + 30} style={{ fontSize: 8 }}>\n          0°C\n        </text>\n        <text x={props.x + 62} y={props.y + 30} style={{ fontSize: 8 }}>{`${min}°C`}</text>\n        <rect x={props.x} y={props.y} width={70} height={20} style={{ fill: \"url(#tempScale)\" }} />\n      </g>\n    )\n  }\n  return (\n    <div>\n      <svg>\n        <defs>\n          <linearGradient id=\"temp\" x1=\"1\" x2=\"0\" y1=\"0\" y2=\"0\">\n            {dates.map((row, index) => (\n              <stop\n                key={index}\n                offset={`${Math.round(\n                  (dates.slice(0, index).reduce((sum, row) => sum + Number(row.DAYS), 0) / days) * 100\n                )}%`}\n                stopColor={`${scale(Math.abs(Number(row.TEMP) / min))}`}\n              />\n            ))}\n          </linearGradient>\n          <linearGradient id=\"tempScale\">\n            <stop offset=\"0%\" stopColor=\"hsl(200, 100%, 80%)\" />\n            <stop offset=\"100%\" stopColor=\"hsl(217, 71%, 53%)\" />\n          </linearGradient>\n        </defs>\n      </svg>\n\n      <VictoryChart>\n        {\n          soldiers.reduce(\n            (prev: { lines: any[]; row?: SoldierRow }, row) => {\n              return prev.row\n                ? {\n                    row,\n                    lines: [\n                      ...prev.lines,\n                      <VictoryLine\n                        domain={{ y: [53, 56], x: [23.5, 38] }}\n                        key={row.LONP}\n                        style={{\n                          data: {\n                            strokeWidth: strokeWidth(prev.row.SURV),\n                            stroke: prev.row.DIR === \"A\" ? \"hsl(141, 71%, 48%)\" : \"hsl(348, 100%, 61%)\",\n                            strokeLinecap: \"round\"\n                          }\n                        }}\n                        data={[\n                          { x: Number(prev.row.LONP), y: Number(prev.row.LATP) },\n                          { x: Number(row.LONP), y: Number(row.LATP) }\n                        ]}\n                      />\n                    ]\n                  }\n                : { lines: [], row }\n            },\n            { row: undefined, lines: [] }\n          ).lines\n        }\n        <VictoryScatter\n          domain={{ y: [53, 56], x: [23.5, 38] }}\n          data={cities.map(row => ({ x: Number(row.LONC), y: Number(row.LATC), label: row.CITY }))}\n          size={2}\n          style={{\n            labels: { fontSize: 5 },\n            data: { fill: \"black\" }\n          }}\n        />\n        <VictoryArea\n          domain={{ y: [53, 56], x: [23.5, 38] }}\n          style={{\n            data: { fill: \"url(#temp)\" }\n          }}\n          data={[\n            { y: 53.5, x: 23.5 },\n            { y: 53.5, x: 38 }\n          ]}\n        />\n        <VictoryLegend\n          x={55}\n          y={0}\n          style={{ labels: { fontSize: 10 } }}\n          orientation=\"vertical\"\n          gutter={20}\n          colorScale={[\"hsl(141, 71%, 48%)\", \"hsl(348, 100%, 61%)\"]}\n          data={[{ name: \"Arriving\" }, { name: \"Returning\" }]}\n        />\n        <VictoryLegend\n          x={150}\n          y={5}\n          dataComponent={<GradientLegend />}\n          style={{ labels: { fontSize: 0 } }}\n          gutter={20}\n          data={[{ name: \"Arriving\" }]}\n        />\n        <VictoryAxis style={{ axis: { display: \"none\" }, tickLabels: { display: \"none\" } }} />\n      </VictoryChart>\n    </div>\n  )\n}\n","import Slider from \"@material-ui/core/Slider\"\nimport Title from \"components/title\"\nimport React, { useState } from \"react\"\nimport { useData, round } from \"utils\"\nimport { VictoryBar, VictoryStack, VictoryTheme, VictoryTooltip } from \"victory\"\nconst VictoryChart = require(\"victory\").VictoryChart\nconst VictoryPolarAxis = require(\"victory-polar-axis\").VictoryPolarAxis\n\ntype Row = { Month: string; Size: string; [deathType: string]: string }\n\nconst Nightingale = () => {\n  const data: Row[] = useData(\"nightingale.csv\")\n  const [range, setRange] = useState([0, 11])\n  const [rotation, setRotation] = useState(0)\n  return (\n    <div className=\"has-background-light\" style={{ height: \"100%\", width: \"100%\" }}>\n      <Title\n        name=\"Nightingale's Rose Chart\"\n        subtext=\"Submission for Assignment 1.2 Part A\"\n        background=\"info\"\n        text=\"light\"\n      />\n      <div className=\"container\">\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <div className=\"columns\">\n              <div className=\"column\">\n                <Graph\n                  rotation={rotation}\n                  data={data.slice(range[0], range[1])}\n                  deathTypes={Object.keys(data[0] || {}).filter(key => ![\"Month\", \"Size\"].includes(key))}\n                />\n              </div>\n              <div className=\"column\">\n                <Controls\n                  {...{\n                    rotation,\n                    setRotation,\n                    range,\n                    setRange,\n                    dates: Object.values(data)\n                      .map(row => row.Month)\n                      .filter(date => date)\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Nightingale\n\ntype GraphProps = {\n  deathTypes: string[]\n  data: Row[]\n  rotation: number\n}\nconst Graph = ({ data, deathTypes, rotation }: GraphProps) => {\n  const tickValues = data.map(row => row.Month)\n  return (\n    <VictoryChart\n      startAngle={rotation}\n      endAngle={360 + rotation}\n      theme={VictoryTheme.material}\n      polar\n      height={400}\n      width={400}\n    >\n      <VictoryPolarAxis labelPlacement=\"vertical\" tickValues={tickValues}></VictoryPolarAxis>\n      <VictoryStack>\n        {deathTypes.map((deathType, index) => {\n          const barData = data.map(row => {\n            const rate = round((12000 * Number(row[deathType])) / Number(row.Size)) || 0\n            return { y: rate, x: row.Month, label: `${deathType} Death Rate in ${row.Month}: ${rate}` }\n          })\n          return <VictoryBar labelComponent={<VictoryTooltip />} animate key={index} data={barData}></VictoryBar>\n        })}\n      </VictoryStack>\n    </VictoryChart>\n  )\n}\n\ntype ControlProps = {\n  dates: string[]\n  range: number[]\n  setRange: (range: number[]) => void\n  rotation: number\n  setRotation: (rotation: number) => void\n}\n\nconst Controls = (props: ControlProps) => {\n  return (\n    <div className=\"container\" style={{ maxWidth: 300 }}>\n      <strong>Date Range</strong>\n      <div>{props.dates[props.range[0]] + \" - \" + props.dates[props.range[1]]}</div>\n      <div>\n        <Slider\n          value={props.range}\n          max={props.dates.length - 1}\n          onChange={(_, newVal) => typeof newVal !== \"number\" && newVal[0] - newVal[1] < -2 && props.setRange(newVal)}\n        />\n      </div>\n      <strong>Rotation</strong>\n      <div>\n        <Slider\n          value={props.rotation}\n          max={360}\n          onChange={(_, newVal) => typeof newVal === \"number\" && props.setRotation(newVal)}\n        />\n      </div>\n    </div>\n  )\n}\n","export const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"] as const\nexport type Month = typeof monthNames[number]\nexport type Year = number\nexport const decisions = [\"Unconditional\", \"Conditional\", \"Refused\"] as const\nexport type Decision = typeof decisions[number]\n\nexport type Point = {\n  name: string\n  date: string\n  lat: number\n  lon: number\n  decision: Decision\n  authority: string\n}\n\nexport type Points = { [year: number]: { [month in Month]: Point[] } }\n\nexport type WordCounts = { [decision in Decision]: [string, number][] }\n\nexport type Data = {\n  points: Points\n  words: WordCounts\n}\n\nexport const decisionColours: { [decision in Decision]: string } = {\n  Unconditional: \"rgb(0, 255, 0)\",\n  Conditional: \"rgb(255, 255, 0)\",\n  Refused: \"rgb(255, 0, 0)\",\n}\n","import ireland from \"@highcharts/map-collection/countries/ie/ie-all.geo.json\"\n\nimport IconButton from \"@material-ui/core/IconButton\"\n\nimport Slider from \"@material-ui/core/Slider\"\nimport PauseIcon from \"@material-ui/icons/PauseSharp\"\nimport PlayIcon from \"@material-ui/icons/PlayArrow\"\n\nimport { Point, decisions, Month, Year, monthNames, Decision, Data, decisionColours } from \"graphs/Planning/base\"\nimport HighchartsReact from \"highcharts-react-official\"\nimport boost from \"highcharts/modules/boost\"\nimport clusters from \"highcharts/modules/marker-clusters\"\nimport _ from \"lodash\"\nimport proj4 from \"proj4\"\nimport React, { useState, useEffect, useRef } from \"react\"\nconst Highcharts = require(\"highcharts/highmaps\")\ndeclare global {\n  interface Window {\n    proj4: any\n  }\n}\nwindow.proj4 = proj4\n\nclusters(Highcharts)\nboost(Highcharts)\n\nconst nextMonth = (month: Month, year: number, years: number[]): [Month, Year] => {\n  if (year === 2020 && month === \"Feb\") return [\"Jan\", years[0]]\n  if (month === \"Dec\") return [\"Jan\", years[(years.indexOf(year) + 1) % years.length]]\n  return [monthNames[monthNames.indexOf(month) + 1], year]\n}\n\nconst DecisionMap = ({ data }: { data: Data }) => {\n  const ref = useRef(null)\n  const [year, setYear] = useState(2011)\n  const [month, setMonth] = useState(\"Jan\" as Month)\n  return (\n    <div className=\"columns\" ref={ref}>\n      <div className=\"column is-three-quarters\">\n        <Map data={data} year={year} month={month} />\n      </div>\n      <div className=\"column\">\n        <Controls\n          {...{\n            month,\n            setYear,\n            years: _.keys(data.points).map(Number),\n            year,\n            setMonth,\n            months: _.keys(data.points[year] || {}).map(Number),\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DecisionMap\n\ntype ControlProps = {\n  years: number[]\n  year: number\n  month: Month\n  setYear: (year: number) => void\n  setMonth: (month: Month) => void\n}\n\nconst Controls = (props: ControlProps) => {\n  const { year, month, years, setYear, setMonth } = props\n  const play = useRef(false)\n  const [, update] = useState({})\n  useEffect(() => {\n    setTimeout(() => {\n      if (play.current) {\n        const [nMonth, nYear] = nextMonth(month, year, years)\n        setMonth(nMonth)\n        if (nYear !== year) setYear(nYear)\n      }\n    }, 1000)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [play.current, year, month, setMonth, setYear, years])\n  return (\n    <div className=\"container\" style={{ maxWidth: 250, marginTop: \"40px\" }}>\n      <div className=\"box has-background-light\">\n        <strong>Year</strong>\n        <div>{year}</div>\n        <div>\n          <Slider\n            max={years.length - 1}\n            value={years.indexOf(year)}\n            onChange={(_, newVal) => typeof newVal === \"number\" && setYear(years[newVal])}\n          />\n        </div>\n        <strong>Month</strong>\n        <div>{month}</div>\n        <div>\n          <Slider\n            max={11}\n            value={monthNames.indexOf(month)}\n            onChange={(_, newVal) => typeof newVal === \"number\" && setMonth(monthNames[newVal])}\n          />\n        </div>\n\n        {play.current ? (\n          <div\n            onClick={() => {\n              update({})\n              play.current = false\n            }}\n            style={{ cursor: \"pointer\", display: \"flex\" }}\n          >\n            <IconButton>\n              <PauseIcon />\n            </IconButton>\n            <p style={{ cursor: \"pointer\", lineHeight: \"45px\" }}>Pause Timeline</p>\n          </div>\n        ) : (\n          <div\n            style={{ cursor: \"pointer\", display: \"flex\" }}\n            onClick={() => {\n              update({})\n              play.current = true\n            }}\n          >\n            <IconButton>\n              <PlayIcon />\n            </IconButton>\n            <p style={{ cursor: \"pointer\", lineHeight: \"45px\" }}>Play Timeline</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nconst Map = (props: { data: Data; year: number; month: Month }) => {\n  const monthData = props.data.points[props.year]?.[props.month]\n  const createSeriesWithDecision = (decision: Decision) =>\n    createSeries(\n      decision,\n      monthData.filter((point) => point.decision === decision)\n    )\n  const series = monthData ? decisions.map(createSeriesWithDecision) : []\n  return <HighchartsReact options={createOptions(series)} highcharts={Highcharts} constructorType=\"mapChart\" />\n}\n\nconst createOptions = (series: Highcharts.SeriesMappointOptions[]): Highcharts.Options => ({\n  chart: {\n    ...({ map: ireland } as any),\n    height: \"100%\",\n    animation: {},\n  },\n  credits: { enabled: false },\n  title: {\n    text: \"Decisions of Planning Applications\",\n  },\n  tooltip: {\n    enabled: false,\n  },\n  series: [\n    {\n      type: \"map\",\n      name: \"Basemap\",\n      borderColor: \"#A0A0A0\",\n      nullColor: \"rgba(200, 200, 200, 0.3)\",\n      showInLegend: false,\n    },\n    ...series,\n  ],\n})\n\nconst createSeries = (name: Decision, data: Point[]): Highcharts.SeriesMappointOptions => {\n  const colour = decisionColours[name]\n  return {\n    name,\n    color: `rgb(${colour})`,\n    type: \"mappoint\",\n    turboThreshold: 0,\n    data,\n    dataLabels: { enabled: false },\n    marker: {\n      enabled: true,\n      symbol: \"circle\",\n      states: {\n        hover: {\n          lineWidth: 0,\n          radiusPlus: 0,\n        },\n      },\n      fillColor: {\n        stops: [\n          [0, 1],\n          [0.7, 0.2],\n          [1, 0],\n        ].map((rad) => [rad[0], colour.replace(\")\", `, ${rad[1]})`).replace(\"rgb\", \"rgba\")]),\n        radialGradient: { r: 10, cx: 0.5, cy: 0.5 },\n      },\n    },\n    cluster: {\n      enabled: true,\n      allowOverlap: false,\n      zones: _.zip(_.range(0, 1000, 30), _.range(30, 1000, 30)).map((range) =>\n        range[1] ? { from: range[0], to: range[1] - 1, marker: { radius: Math.pow(Math.log(range[1]), 2) } } : {}\n      ),\n    },\n  }\n}\n","import { Data, decisionColours, Decision, WordCounts } from \"graphs/Planning/base\"\nimport HighchartsReact from \"highcharts-react-official\"\nimport _ from \"lodash\"\nimport React, { useState, useRef } from \"react\"\nconst Highcharts = require(\"highcharts\")\nconst HighchartsMore = require(\"highcharts/highcharts-more\")\nHighchartsMore(Highcharts)\n\nconst Words = (props: { data: Data }) => {\n  return (\n    <div className=\"container\">\n      <HighchartsReact options={useOptions(props.data)} highcharts={Highcharts} />\n    </div>\n  )\n}\n\nexport default Words\n\nconst useOptions = (data: Data): Highcharts.Options => {\n  const isBubble = useRef(true)\n  const [, setEmpty] = useState(false)\n  const wordTotals = _.mapValues(data.words, (counts) => counts.slice(0, 25).reduce((sum, val) => sum + val[1], 0))\n  const formatted = formatWordCounts(data.words)\n  return {\n    chart: {\n      type: isBubble.current ? \"packedbubble\" : \"column\",\n      height: \"70%\",\n      events: {\n        click: () => {\n          setEmpty(!isBubble.current)\n          isBubble.current = !isBubble.current\n        },\n      },\n    },\n    xAxis: { categories: formatted.xAxis },\n    title: {\n      text: \"Common word in planning applications.\",\n    },\n    subtitle: {\n      text: \"Click the graph to change view.\",\n    },\n    tooltip: {\n      useHTML: true,\n      pointFormat:\n        \"<b>{point.name}</b>: Occurrs in <b>{point.y}%</b> ({point.custom.count}) of {point.custom.decision} decisions.\",\n    },\n    plotOptions: {\n      series: {\n        stacking: \"normal\",\n      },\n      packedbubble: {\n        minSize: \"20%\",\n        maxSize: \"100%\",\n        layoutAlgorithm: {\n          gravitationalConstant: 0.2,\n          splitSeries: true,\n          parentNodeLimit: true,\n        },\n        dataLabels: {\n          enabled: true,\n          format: \"{point.name}\",\n          style: {\n            color: \"black\",\n            textOutline: \"none\",\n            fontWeight: \"normal\",\n          },\n        },\n      },\n    } as any,\n    series: _.map(data.words, (counts, decision: Decision) => ({\n      name: decision,\n      color: decisionColours[decision],\n      stack: \"normal\",\n      marker: {\n        lineColor: \"black\",\n      },\n      data: formatted.data[decision]\n        .map((val, index) => ({\n          name: formatted.xAxis[index],\n          y: round((val * 100) / wordTotals[decision]),\n          value: round((val * 100) / wordTotals[decision]),\n          custom: { count: val, decision: decision.toLowerCase() },\n        }))\n        .filter((p) => p.name),\n    })) as any,\n  }\n}\n\nconst formatWordCounts = (wordCounts: WordCounts) => {\n  const wordMaps = _.mapValues(wordCounts, (counts) =>\n    counts.reduce((wordMap, val) => ({ ...wordMap, [val[0]]: val[1] }), {} as { [word: string]: number })\n  )\n  const axisOrder = _.union(..._.map(wordCounts, (counts) => counts.slice(0, 25).map((val) => val[0]))).sort()\n  return {\n    xAxis: axisOrder,\n    data: (_.mapValues(wordCounts, (__, decision: Decision) =>\n      axisOrder.map((word) => wordMaps[decision][word] || 0)\n    ) as any) as { [decision in Decision]: number[] },\n  }\n}\n\nconst round = (num: number) => Math.round(num * Math.pow(10, 2)) / Math.pow(10, 2)\n","import Title from \"components/title\"\nimport { Data } from \"graphs/Planning/base\"\nimport React from \"react\"\nimport { useData } from \"utils\"\nimport DecisionMap from \"./map\"\nimport Words from \"./words\"\n\nconst Planning = () => {\n  const data: Data = useData(\"points.json\", \"JSON\", { points: {}, words: {} } as Data)\n  return (\n    <div className=\"has-background-light\">\n      <Title\n        name=\"Planning Applications Ireland\"\n        subtext=\"Submission for Assignment 3\"\n        background=\"danger\"\n        text=\"light\"\n      />\n      <div className=\"container has-background-white\">\n        <div className=\"box\">\n          <DecisionMap data={data} />\n          <Words data={data} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Planning\n","import Welcome from \"components/welcome\"\nimport Minard from \"graphs/Minard\"\nimport Nightingale from \"graphs/Nightingale\"\nimport Planning from \"graphs/Planning\"\nimport React from \"react\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Router basename=\"/datavis\">\n      <div className=\"has-background-grey-lighter\" style={{ height: \"100%\" }}>\n        <div>\n          <div className=\"navbar has-background-white\" role=\"navigation\">\n            <div className=\"navbar-brand\">\n              <Link to=\"/\" className=\"navbar-item\">\n                <p className=\"title is-4\" style={{ marginLeft: 10 }}>\n                  DataVis\n                </p>\n              </Link>\n            </div>\n            <div className=\"navbar-menu is-active\">\n              <div className=\"navbar-start\">\n                <Link to=\"/nightingale\" className=\"navbar-item\">\n                  <div className=\"subtitle is-6\">Nightingale</div>\n                </Link>\n                <Link to=\"/minard\" className=\"navbar-item\">\n                  <div className=\"subtitle is-6\">Minard</div>\n                </Link>\n                <Link to=\"/planning\" className=\"navbar-item\">\n                  <div className=\"subtitle is-6\">Planning Applications</div>\n                </Link>\n              </div>\n            </div>\n          </div>\n          <Switch>\n            <Route path=\"/nightingale\">\n              <Nightingale />\n            </Route>\n            <Route path=\"/minard\">\n              <Minard />\n            </Route>\n            <Route path=\"/planning\">\n              <Planning />\n            </Route>\n            <Route path=\"/\">\n              <Welcome />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport \"font-awesome/css/font-awesome.min.css\"\nimport \"bulma\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}